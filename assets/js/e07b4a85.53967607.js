"use strict";(self.webpackChunkalto_docs=self.webpackChunkalto_docs||[]).push([[886],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),g=o,h=d["".concat(s,".").concat(g)]||d[g]||u[g]||r;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},4904:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=a(7462),o=(a(7294),a(3905));const r={},i="Alto Next Steps",l={unversionedId:"familiarize",id:"familiarize",title:"Alto Next Steps",description:"The quickstart guide is a great way to get to quickly get to the a-ha moment of Alto. However, it is helpful to move beyond the quickstart and see a more contrived example of what a real project might look like. This will expose you to some more of the possibilities of Alto. While the rest of the learning content will have toml, yaml, and json examples, we will use toml in this brief exposure to a more refined and terse config file. Exposure is the key here, so don't worry about understanding everything right away. We will cover the details in the next section.",source:"@site/docs/familiarize.md",sourceDirName:".",slug:"/familiarize",permalink:"/alto/docs/familiarize",draft:!1,editUrl:"https://github.com/z3z1ma/alto/tree/main/docs/docs/familiarize.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Alto Quickstart",permalink:"/alto/docs/intro"},next:{title:"Create a Project",permalink:"/alto/docs/tutorial-basics/create-a-project"}},s={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Listing the available commands",id:"listing-the-available-commands",level:2},{value:"Running the pipelines",id:"running-the-pipelines",level:2},{value:"Tap to Target",id:"tap-to-target",level:3},{value:"Tap to Reservoir",id:"tap-to-reservoir",level:3},{value:"Reservoir to Target",id:"reservoir-to-target",level:3},{value:"Invoking utilities",id:"invoking-utilities",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"alto-next-steps"},"Alto Next Steps"),(0,o.kt)("p",null,"The quickstart guide is a great way to get to quickly get to the ",(0,o.kt)("strong",{parentName:"p"},"a-ha moment")," of Alto. However, it is helpful to move beyond the quickstart and see a more contrived example of what a ",(0,o.kt)("em",{parentName:"p"},"real")," project might look like. This will expose you to some more of the possibilities of Alto. While the rest of the learning content will have ",(0,o.kt)("inlineCode",{parentName:"p"},"toml"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"yaml"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," examples, we will use ",(0,o.kt)("inlineCode",{parentName:"p"},"toml")," in this brief exposure to a more refined and terse config file. Exposure is the key here, so don't worry about understanding everything right away. We will cover the details in the next section."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"What you will notice right away is that the configuration can be very ",(0,o.kt)("strong",{parentName:"p"},"concise"),". These are the same 3 plugins that ",(0,o.kt)("inlineCode",{parentName:"p"},"alto init")," generates, but with more liberties taken to show off the flexibility of the configuration and most comments removed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="alto.toml"',title:'"alto.toml"'},'[default]\nproject_name = "{project}"\nload_path = "raw"\nextensions = ["evidence"]\nenvironment.STARTER_PROJECT = 1\n# https://github.com/dlt-hub/dlt\nutilities.dlt.pip_url = "python-dlt[duckdb]>=0.2.0a25"\nutilities.dlt.environment.PEX_INHERIT_PATH = "fallback"\n\n[default.taps]\n# https://gitlab.com/meltano/tap-carbon-intensity\ncarbon-data.pip_url = "git+https://gitlab.com/meltano/tap-carbon-intensity.git#egg=tap_carbon_intensity"\ncarbon-data.executable = "tap-carbon-intensity"\ncarbon-data.load_path = "carbon_intensity"\ncarbon-data.capabilities = ["state", "catalog"]\ncarbon-data.select = ["*.*", "~*.dnoregion"]\n\n# https://hub.meltano.com/extractors/tap-bls\nlabor-data.pip_url = "git+https://github.com/frasermarlow/tap-bls#egg=tap_bls"\nlabor-data.executable = "tap-bls"\nlabor-data.capabilities = ["state", "catalog"]\nlabor-data.load_path = "bls"\nlabor-data.select = ["JTU000000000000000JOR", "JTU000000000000000JOL"]\nlabor-data.config.startyear = "2019"\nlabor-data.config.endyear = "2020"\nlabor-data.config.calculations = "true"\nlabor-data.config.annualaverage = "false"\nlabor-data.config.aspects = "false"\nlabor-data.config.disable_collection = "true"\nlabor-data.config.update_state = "false"\nlabor-data.config.series_list_file_location = "./series.json"\n\n[default.targets]\n# https://hub.meltano.com/loaders/target-singer-jsonl\njsonl.pip_url = "target-jsonl==0.1.4"\njsonl.executable = "target-jsonl"\njsonl.config.destination_path = "@format output/{this.load_path}"\n\n[github_actions]\nload_path = "cicd"\ntargets.jsonl.config.destination_path = "@format /github/workspace/output/{this.load_path}"\n')),(0,o.kt)("h2",{id:"listing-the-available-commands"},"Listing the available commands"),(0,o.kt)("p",null,"You will notice here that, because ",(0,o.kt)("inlineCode",{parentName:"p"},"alto")," is entirely driven by configuration, the commands listed here take advantage of the names we have given to the plugins. This is an extremely easy way of ",(0,o.kt)("strong",{parentName:"p"},"adding context to your CLI experience"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(env) vscode \u279c /workspaces/alto/example_1 (main) $ alto list --all\n\ud83d\udce6 Alto version: 0.2.10\n\ud83c\udfd7  Working directory: .\n\ud83c\udf0e Environment: DEVELOPMENT\n\n\ud83d\udc77 build                         [core] Generate pex plugin based on the alto config.\n\ud83d\udc77 build:carbon-data             Build the carbon-data plugin\n\ud83d\udc77 build:labor-data              Build the labor-data plugin\n\ud83d\udc77 build:jsonl                   Build the jsonl plugin\n\ud83d\udc77 build:dlt                     Build the dlt plugin\n\ud83d\udee0  config                        [core] Generate configuration files on disk.\n\ud83d\udee0  config:carbon-data            Render configuration for the carbon-data plugin\n\ud83d\udee0  config:labor-data             Render configuration for the labor-data plugin\n\ud83d\udee0  config:jsonl                  Render configuration for the jsonl plugin\n\ud83d\udee0  config:jsonl--carbon-data     Render configuration for the jsonl plugin with carbon-data as source\n\ud83d\udee0  config:jsonl--labor-data      Render configuration for the jsonl plugin with labor-data as source\n\ud83d\udcd6 catalog                       [singer] Generate base catalog file for a Singer tap.\n\ud83d\udcd6 catalog:carbon-data           Generate base catalog for carbon-data\n\ud83d\udcd6 catalog:labor-data            Generate base catalog for labor-data\n\ud83d\udce6 apply                         [singer] Apply user config to base catalog file.\n\ud83d\udce6 apply:carbon-data             Render runtime catalog for carbon-data\n\ud83d\udce6 apply:labor-data              Render runtime catalog for labor-data\n\ud83d\udd0c carbon-data                   [singer] Execute a data pipeline.\n\ud83d\udd0c carbon-data:jsonl             Run the carbon-data to jsonl data pipeline\n\ud83d\udd0c labor-data                    [singer] Execute a data pipeline.\n\ud83d\udd0c labor-data:jsonl              Run the labor-data to jsonl data pipeline\n\ud83d\udca7 reservoir                     [singer] Execute a data pipeline.\n\ud83d\udca7 reservoir:carbon-data-jsonl   Run the carbon-data to jsonl data pipeline from the reservoir to the target\n\ud83d\udca7 reservoir:labor-data-jsonl    Run the labor-data to jsonl data pipeline from the reservoir to the target\n\ud83d\udd0c carbon-data:reservoir         Run the carbon-data to reservoir data pipeline to the reservoir from the tap\n\ud83d\udd0c labor-data:reservoir          Run the labor-data to reservoir data pipeline to the reservoir from the tap\n\ud83e\uddea test                          [singer] Run tests for taps.\n\ud83e\uddea test:carbon-data              Test the carbon-data plugin\n\ud83e\uddea test:labor-data               Test the labor-data plugin\n\ud83d\udc81 about                         [singer] Run the about command for a Singer tap.\n\ud83d\ude80 evidence                      [extension] Evidence.dev extension.\n\ud83d\ude80 evidence:initialize           Generate Evidence project from template.\n\ud83d\ude80 evidence:build                Build the Evidence dev reports.\n\ud83d\ude80 evidence:dev                  Run the Evidence dev server.\n")),(0,o.kt)("h2",{id:"running-the-pipelines"},"Running the pipelines"),(0,o.kt)("h3",{id:"tap-to-target"},"Tap to Target"),(0,o.kt)("p",null,"Given the above configuration, you can run the following command to ",(0,o.kt)("strong",{parentName:"p"},"extract")," data from the BLS (Bereau of Labor and Statistics) and Carbon Intensity APIs and ",(0,o.kt)("strong",{parentName:"p"},"load")," it into JSONL files."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"alto carbon-data:jsonl\nalto labor-data:jsonl\n")),(0,o.kt)("h3",{id:"tap-to-reservoir"},"Tap to Reservoir"),(0,o.kt)("p",null,"Alternatively, you can run the following command to ",(0,o.kt)("strong",{parentName:"p"},"extract")," data from the BLS (Bereau of Labor and Statistics) and Carbon Intensity APIs and load it into the project ",(0,o.kt)("strong",{parentName:"p"},"reservoir"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"alto carbon-data:reservoir\nalto labor-data:reservoir\n")),(0,o.kt)("h3",{id:"reservoir-to-target"},"Reservoir to Target"),(0,o.kt)("p",null,"From the reservoir, you can replay the data extract (since it is still in Singer format and partitioned for parallelization) into ",(0,o.kt)("strong",{parentName:"p"},"any")," number of targets ",(0,o.kt)("strong",{parentName:"p"},"any")," number of times."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"alto reservoir:carbon-data-jsonl\nalto reservoir:carbon-data-snowflake  # here as example, not in config\nalto reservoir:carbon-data-parquet    # here as example, not in config\n")),(0,o.kt)("h3",{id:"invoking-utilities"},"Invoking utilities"),(0,o.kt)("p",null,"Lastly, you can ",(0,o.kt)("strong",{parentName:"p"},"invoke")," the utility, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dlt-hub/dlt"},"dlt"),", defined above (you can actually invoke any plugin this way)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"alto invoke dlt --help  # invoke the executable directly\n\nalto invoke python dlt  # drop into a python shell with dlt installed\nalto invoke python dlt ./path/to/pipeline.py  # run a python script\n")))}u.isMDXComponent=!0}}]);