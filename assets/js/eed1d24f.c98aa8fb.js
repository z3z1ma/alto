"use strict";(self.webpackChunkalto_docs=self.webpackChunkalto_docs||[]).push([[231],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),c=p(n),d=i,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(f,o(o({ref:e},u),{},{components:n})):a.createElement(f,o({ref:e},u))}));function f(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[c]="string"==typeof t?t:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3942:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},o="Plugin Configuration",l={unversionedId:"tutorial-basics/plugin-configuration",id:"tutorial-basics/plugin-configuration",title:"Plugin Configuration",description:"What is a plugin?",source:"@site/docs/tutorial-basics/plugin-configuration.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/plugin-configuration",permalink:"/alto/docs/tutorial-basics/plugin-configuration",draft:!1,editUrl:"https://github.com/z3z1ma/alto/tree/main/docs/docs/tutorial-basics/plugin-configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Project Configuration",permalink:"/alto/docs/tutorial-basics/project-configuration"},next:{title:"Tap Configuration",permalink:"/alto/docs/tutorial-basics/tap-configuration"}},s={},p=[{value:"What is a plugin?",id:"what-is-a-plugin",level:2},{value:"How do I configure a plugin?",id:"how-do-i-configure-a-plugin",level:2},{value:"Config Structure",id:"config-structure",level:2},{value:"Where do I find plugins?",id:"where-do-i-find-plugins",level:2}],u={toc:p},c="wrapper";function m(t){let{components:e,...n}=t;return(0,i.kt)(c,(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"plugin-configuration"},"Plugin Configuration"),(0,i.kt)("h2",{id:"what-is-a-plugin"},"What is a plugin?"),(0,i.kt)("p",null,"A plugin is what ",(0,i.kt)("inlineCode",{parentName:"p"},"alto")," uses to perform work. There are 3 ",(0,i.kt)("strong",{parentName:"p"},"types")," of plugins:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Taps")," - Taps are used to extract data from a source. For example, a tap might be a plugin that can extract data from a database like Postgres or an API like HubSpot."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Targets")," - Targets are used to load data to a destination. For example, a target might be a plugin that can load data to BigQuery, local parquets, or blob storage."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Utilities")," - Utilities are simply python packages that are not taps or targets that you want ",(0,i.kt)("inlineCode",{parentName:"li"},"alto")," to manage. The advantage being that you get the build-once PEX files, remote filesystem caching, and environment isolation that ",(0,i.kt)("inlineCode",{parentName:"li"},"alto")," provides.")),(0,i.kt)("h2",{id:"how-do-i-configure-a-plugin"},"How do I configure a plugin?"),(0,i.kt)("p",null,"As we stated in the last section, there are two main units of configuration in ",(0,i.kt)("inlineCode",{parentName:"p"},"alto"),". There is ",(0,i.kt)("strong",{parentName:"p"},"project-level")," configuration and there is ",(0,i.kt)("strong",{parentName:"p"},"plugin-level")," configuration. Plugin level configuration exists in 3 different sections of the ",(0,i.kt)("inlineCode",{parentName:"p"},"alto.toml")," file:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default.taps")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default.targets")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default.utilities"))),(0,i.kt)("p",null,"Each section corresponds to the ",(0,i.kt)("strong",{parentName:"p"},"type")," of plugin and ",(0,i.kt)("inlineCode",{parentName:"p"},"alto")," uses this information to wire up all the possible tap and target combinations and to expose functionality to the user via the CLI in an intuitive way. Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," could be replaced with any environment name."),(0,i.kt)("h2",{id:"config-structure"},"Config Structure"),(0,i.kt)("admonition",{title:"Tip",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You will notice much of this is optional. Where possible, we try to provide sensible defaults. The end-goal is conciseness. Feel free to breeze past this if you want to jump into the more concrete examples in the following sections.")),(0,i.kt)("p",null,"Here we represent it as an abstract ",(0,i.kt)("strong",{parentName:"p"},"tree")," where each node is a possible key in the configuration file. The ",(0,i.kt)("inlineCode",{parentName:"p"},"->")," symbol indicates a key that points to a value. The ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," prefix indicates the key is optional:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"env-name\n\u251c\u2500\u2500 environment   -> Dict[str, str]\n\u251c\u2500\u2500 extensions    -> List[str or path]\n\u251c\u2500\u2500 load_path     -> str\n\u251c\u2500\u2500 taps\n\u2502   \u2514\u2500\u2500 tap-name\n\u2502       \u251c\u2500\u2500 pip_url        -> str\n\u2502       \u251c\u2500\u2500 ?executable    -> str\n\u2502       \u251c\u2500\u2500 ?entrypoint    -> str\n\u2502       \u251c\u2500\u2500 ?capabilities  -> List[str]\n\u2502       \u251c\u2500\u2500 ?config        -> Dict[str, Any]\n\u2502       \u251c\u2500\u2500 ?select        -> List[str]\n\u2502       \u251c\u2500\u2500 ?metadata      -> Dict[str, Dict[str, Any]]\n\u2502       \u251c\u2500\u2500 ?stream_maps   -> List[path or Dict[str, str]]\n\u2502       \u251c\u2500\u2500 ?load_path     -> str\n\u2502       \u251c\u2500\u2500 ?inherit_from  -> str\n\u2502       \u251c\u2500\u2500 ?environment   -> Dict[str, str]\n\u2502       \u2514\u2500\u2500 ?[accent]      -> Dict[str, Any]\n\u251c\u2500\u2500 targets\n\u2502   \u2514\u2500\u2500 target-name\n\u2502       \u251c\u2500\u2500 pip_url\n\u2502       \u251c\u2500\u2500 ?executable\n\u2502       \u251c\u2500\u2500 ?entrypoint\n\u2502       \u251c\u2500\u2500 ?inherit_from\n\u2502       \u251c\u2500\u2500 ?environment\n\u2502       \u2514\u2500\u2500 ?config\n\u2514\u2500\u2500 utilities\n    \u2514\u2500\u2500 utility-name\n        \u251c\u2500\u2500 pip_url\n        \u251c\u2500\u2500 ?executable\n        \u251c\u2500\u2500 ?entrypoint\n        \u251c\u2500\u2500 ?inherit_from\n        \u2514\u2500\u2500 ?environment\n")),(0,i.kt)("h2",{id:"where-do-i-find-plugins"},"Where do I find plugins?"),(0,i.kt)("p",null,"The best source for available taps is the ",(0,i.kt)("a",{parentName:"p",href:"https://hub.meltano.com/"},"Meltano Hub"),". We expose an index of ",(0,i.kt)("a",{parentName:"p",href:"/docs/integrations/taps"},"taps")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/integrations/taps"},"targets")," in the documentation as a convenience too. Alternatively, you can search ",(0,i.kt)("a",{parentName:"p",href:"https://github.com"},"GitHub")," OR roll your own thanks to the great ",(0,i.kt)("a",{parentName:"p",href:"https://sdk.meltano.com/en/latest/"},"SDK"),"."))}m.isMDXComponent=!0}}]);